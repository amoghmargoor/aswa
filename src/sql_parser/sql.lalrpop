use crate::sql_parser::token::{self, Tok};
use crate::sql_parser::ast::expression::*;
use crate::sql_parser::ast::basic_ast::*;
use crate::sql_parser::token::*;

#[recursive_ascent]
grammar<'input>(text: &'input str);

// Utilities
CommaList<T>: Vec<T> = {
    T => vec![<>],
    <i:CommaList<T>> "," <e:T> => {
        let mut v = i;
        v.push(e);
        v
    },
};

IdentifierList<T>: Vec<T> = {
    T => vec![<>],
    <i: IdentifierList<T>> "." <e:T> => {
        let mut v = i;
        v.push(e);
        v
    }
};

pub Statement: Statement = {
    Query,
    Use
};

Use: Statement = {
    "use" <qualified_name: QualifiedName> => Statement::Use {
        schema: qualified_name
    }
};

CreateSchema: Statement = {
    "create" "schema" <if_not_exists: ("if" "not" "exists")?> <qualified_name: QualifiedName> => Statement::CreateSchema {
        schema: qualified_name,
        if_not_exists: if_not_exists.is_some()
    }
};

DropSchema: Statement = {
    "drop" "schema" <if_exists: ("if" "exists")?> <qualified_name: QualifiedName> <drop_prop: DropProp?> => Statement::DropSchema {
        schema: qualified_name,
        if_exists: if_exists.is_some(),
        prop: drop_prop
    }
};

DropProp: DropProp = {
    "cascade" => DropProp::CASCADE,
    "restrict" => DropProp::RESTRICT
};

AlterSchema: Statement = {
    "alter" "schema" <qualified_name: QualifiedName> "rename" "to" <identifier: Identifier> => Statement::AlterSchema {
        from: qualified_name,
        to: identifier
    }
};

CreateTableAsSelect: Statement = {
    "create" "table" <if_not_exists: ("if" "not" "exists")?> <table_name: QualifiedName>
     <column_aliases: ColumnAliases?> "as" "(" <query: Query> ")" => Statement::CreateTableAsSelect {
         table_name: table_name,
         if_not_exists: if_not_exists.is_some(),
         columns: column_aliases,
         query: Box::new(query)
     },
         "create" "table" <if_not_exists: ("if" "not" "exists")?> <table_name: QualifiedName>
          <column_aliases: ColumnAliases?> "as" <query: Query> => Statement::CreateTableAsSelect {
              table_name: table_name,
              if_not_exists: if_not_exists.is_some(),
              columns: column_aliases,
              query: Box::new(query)
          }
};

CreateTable: Statement = {
    "create" "table" <if_not_exists: ("if" "not" "exists")?> <table_name: QualifiedName> "(" <table_elements: CommaList<TableElement>> ")" => Statement::CreateTable {
        table_name: table_name,
        if_not_exists: if_not_exists.is_some(),
        table_elements: table_elements
    }
};

DropTable: Statement = {
    "drop" "table" <if_exists: ("if" "exists")?> <table_name: QualifiedName> => Statement::DropTable {
        table_name: table_name,
        if_exists: if_exists.is_some()
    }
};

InsertInto: Statement = {
    "insert" "into" <table_name: QualifiedName> <column_aliases: ColumnAliases?> <query: Query> => Statement::InsertInto {
        table_name: table_name,
        columns: column_aliases,
        query: Box::new(query)
    }
};

Delete: Statement = {
    <table_name: QualifiedName> <expression: WhereClause?> => Statement::Delete {
        from: table_name,
        filter: expression
    }
};

TableElement: TableElement = {
    <column_name: Identifier> <col_type: Type> => TableElement::ColumnDefinition(column_name, Box::new(col_type))
};

Type: Type = {
    "array" "<" <t: Type> ">" => Type::Array(Box::new(t)),
    "map" "<" <key_type: Type> "," <value_type: Type> ">" => Type::Map(Box::new(key_type), Box::new(value_type)),
    "row" "(" <c: CommaList<TableElement>> ")" => Type::Row(<>),
    "time" "with" "time" "zone" "(" <type_params: CommaList<TypeParameter>?> ")" => Type::TIME_WITH_TIME_ZONE(type_params),
    "timestamp" "with" "time" "zone" "(" <type_params: CommaList<TypeParameter>?> ")" => Type::TIMESTAMP_WITH_TIME_ZONE(type_params),
    "double" "precision" "(" <type_params: CommaList<TypeParameter>?> ")" => Type::DOUBLE_PRECISION(type_params),
    <identifier: Identifier> => Type::User_Defined(identifier, None),
    <identifier: Identifier> "(" <type_params: CommaList<TypeParameter>?> ")" => Type::User_Defined(identifier, type_params)
};

TypeParameter: TypeParameter = {
    "Integer" => TypeParameter::IntegerTypeParam(<>.to_string()),
    <Type> => TypeParameter::TypeParam(<>)
};

Query: Statement = {
    <with: With?> <body: QueryNoWith> => Statement::Query {
        with: with, body: body
    }
};

QueryNoWith: QueryBody = {
    <query_term: QueryTerm> <order_by: OrderBy?> <limit: Limit?> => QueryBody {
        query_term: query_term, order_by: order_by, limit: limit
    }
};

QueryTerm: QueryTerm = {
    QueryPrimary => QueryTerm {select: <>, other: None},
    <query_term: QueryTerm> <setOperator: SetOperator> <setQuantifier: SetQuantifier?>
     <query_primary: QueryPrimary> => QueryTerm { select: query_primary, other: Some(SetQueryTerm {
         operator: setOperator,
         query: Box::new(query_term)
     })
     }
};

QueryPrimary: Select = {
    QuerySpecification
};

QuerySpecification: Select = {
    "select" <set_quantifier: SetQuantifier?> <select_items: CommaList<SelectItem>>
     "from" <relation: Identifier>
      <where_clause: WhereClause?> => Select {
          distinctness: set_quantifier, projection: select_items, from: relation, filter: where_clause
      }
};

WhereClause: Expression = {
    "where" <expression: BooleanExpression> => expression
}

NamedQuery: NamedQuery =
    <tbl_name: Identifier> <columns: ColumnAliases?> "as" "(" <body: Query> ")" => NamedQuery {
        tbl_name: tbl_name, columns: columns, body: Box::new(body)
    };

//Item
SelectItem: SelectItem =
    <expression: Expression> <alias: AliasName?> => SelectItem {
        expression: expression,
        alias: alias
    };

SortItem: SortItem =
    <expression: Expression> <sort_order: SortOrder?> <null_order: NullOrder?> => SortItem {
        expression: expression, sort_order: sort_order, null_order: null_order
    };


//Expressions
pub Expression: Expression = {
    BooleanExpression
};

// Following simple Grammar that is being used in Presto is ambiguous and
// cannot be resolved by Lalrpop currently unlike ANTLR. Hence, converting it into unambiguous one
// BooleanExpression : Expression = {
//    ValueExpression,
//    "not" <booleanExpression: BooleanExpression> => BooleanExpression::not(booleanExpression),
//    <boolExpr1: BooleanExpression> "or" <boolExpr2: BooleanExpression> => BooleanExpression::or(boolExpr1, boolExpr2),
//    <boolExpr1: BooleanExpression> "and" <boolExpr2: BooleanExpression> => BooleanExpression::and(boolExpr1, boolExpr2)
//};

BooleanExpression: Expression = {
    ValueExpression,
    NotExpression
};

NotExpression: Expression = {
    "not" <not_expr: NotExpression> => BooleanExpression::not(not_expr),
    AndExpression
};

AndExpression: Expression = {
    <and_expr: AndExpression> "and" <or_expr: OrExpression> => BooleanExpression::and(and_expr, or_expr),
    OrExpression
};

OrExpression: Expression = {
    <or_expr: OrExpression> "or" <value_expression: ValueExpression> => BooleanExpression::or(or_expr, value_expression)
};

ValueExpression : Expression = {
    Identifier => Expression::Identifier {
        name: <>
    },
    LiteralValue => Expression::Literal(<>)
};

// term
LiteralValue: Literal = {
    NumericLiteral => Literal::Numeric(<>.to_owned()),
    "StringLiteral" => Literal::String(<>.to_owned()),
    "Blob" => Literal::Blob(<>.to_owned()),
    "null" => Literal::Null,
    "current_date" => Literal::CurrentDate,
    "current_time" => Literal::CurrentTime,
    "current_timestamp" => Literal::CurrentTimestamp,
};

// number
NumericLiteral = {
    "Integer",
    "Float",
};

SetOperator: SetOperator = {
    "union" => SetOperator::Union,
    "intersect" => SetOperator::Intersect,
    "except" => SetOperator::Except
};

// Special Tokens
SetQuantifier: Distinctness = {
    "distinct" => Distinctness::Distinct,
    "all" => Distinctness::All
};

SortOrder: SortOrder = {
    "asc" => SortOrder::Asc,
    "desc" => SortOrder::Desc
};

NullOrder: NullOrder = {
    "first" => NullOrder::First,
    "last" => NullOrder::Last
};

//TODO change
Limit: Limit = {
    "limit" <Expression> => Limit { expr: <>, offset: None },
    "limit" <expr: Expression> "offset" <offset: Expression> => Limit { expr: expr, offset: Some(offset) },
    "limit" <expr: Expression> "," <offset: Expression> => Limit { expr: expr, offset: Some(offset) },
};

Identifier : String = {
    "Id" => <>.to_owned()
};


With: With =
    "with" <recursive: "recursive"?> <named_queries: CommaList<NamedQuery>> => With {
        recursive: recursive.is_some(), body: named_queries
    };

OrderBy: Vec<SortItem> =
    "order" "by" <order_items: CommaList<SortItem>> => order_items;

ColumnAliases: Vec<ColumnName> =
    "(" <identifiers: CommaList<ColumnName>> ")" => identifiers;

ColumnName: ColumnName = {
    <identifier: Identifier> => ColumnName {
        identifier: identifier
    }
};

AliasName: AliasName =
  "as"? <identifier:Identifier> => AliasName {
      identifier: identifier
  };

QualifiedName: QualifiedName = {
    <list: IdentifierList<Identifier>> => QualifiedName {
        name: list
    }
};

extern {
    type Location = usize;
    type Error = token::Error;
    enum Tok<'input> {
        "abort" => Tok::Abort,
        "action" => Tok::Action,
        "add" => Tok::Add,
        "after" => Tok::After,
        "all" => Tok::All,
        "alter" => Tok::Alter,
        "analyze" => Tok::Analyze,
        "and" => Tok::And,
        "array" => Tok::Array,
        "as" => Tok::As,
        "asc" => Tok::Asc,
        "attach" => Tok::Attach,
        "autoincrement" => Tok::Autoincr,
        "before" => Tok::Before,
        "begin" => Tok::Begin,
        "between" => Tok::Between,
        "by" => Tok::By,
        "cascade" => Tok::Cascade,
        "case" => Tok::Case,
        "cast" => Tok::Cast,
        "check" => Tok::Check,
        "collate" => Tok::Collate,
        "column" => Tok::ColumnKw,
        "commit" => Tok::Commit,
        "conflict" => Tok::Conflict,
        "constraint" => Tok::Constraint,
        "create" => Tok::Create,
        "cross" => Tok::Cross,
        "current_date" => Tok::CurrentDate,
        "current_time" => Tok::CurrentTime,
        "current_timestamp" => Tok::CurrentTimestamp,
        "database" => Tok::Database,
        "default" => Tok::Default,
        "deferrable" => Tok::Deferrable,
        "deferred" => Tok::Deferred,
        "delete" => Tok::Delete,
        "desc" => Tok::Desc,
        "detach" => Tok::Detach,
        "distinct" => Tok::Distinct,
        "double" => Tok::Double,
        "drop" => Tok::Drop,
        "each" => Tok::Each,
        "else" => Tok::Else,
        "end" => Tok::End,
        "escape" => Tok::Escape,
        "except" => Tok::Except,
        "exclusive" => Tok::Exclusive,
        "exists" => Tok::Exists,
        "explain" => Tok::Explain,
        "fail" => Tok::Fail,
        "first" => Tok::First,
        "for" => Tok::For,
        "foreign" => Tok::Foreign,
        "from" => Tok::From,
        "full" => Tok::Full,
        "glob" => Tok::Glob,
        "group" => Tok::Group,
        "having" => Tok::Having,
        "if" => Tok::If,
        "ignore" => Tok::Ignore,
        "immediate" => Tok::Immediate,
        "in" => Tok::In,
        "index" => Tok::Index,
        "indexed" => Tok::Indexed,
        "initially" => Tok::Initially,
        "inner" => Tok::Inner,
        "insert" => Tok::Insert,
        "instead" => Tok::Instead,
        "intersect" => Tok::Intersect,
        "into" => Tok::Into,
        "is" => Tok::Is,
        "isnull" => Tok::IsNull,
        "join" => Tok::Join,
        "key" => Tok::Key,
        "last" => Tok::Last,
        "left" => Tok::Left,
        "like" => Tok::Like,
        "limit" => Tok::Limit,
        "match" => Tok::Match,
        "map" => Tok::Map,
        "natural" => Tok::Natural,
        "no" => Tok::No,
        "not" => Tok::Not,
        "notnull" => Tok::NotNull,
        "null" => Tok::Null,
        "of" => Tok::Of,
        "offset" => Tok::Offset,
        "on" => Tok::On,
        "or" => Tok::Or,
        "order" => Tok::Order,
        "outer" => Tok::Outer,
        "plan" => Tok::Plan,
        "pragma" => Tok::Pragma,
        "precision" => Tok::Precision,
        "primary" => Tok::Primary,
        "query" => Tok::Query,
        "raise" => Tok::Raise,
        "recursive" => Tok::Recursive,
        "references" => Tok::References,
        "regexp" => Tok::Regexp,
        "reindex" => Tok::Reindex,
        "release" => Tok::Release,
        "rename" => Tok::Rename,
        "replace" => Tok::Replace,
        "restrict" => Tok::Restrict,
        "right" => Tok::Right,
        "rollback" => Tok::Rollback,
        "row" => Tok::Row,
        "savepoint" => Tok::Savepoint,
        "schema" => Tok::Schema,
        "select" => Tok::Select,
        "set" => Tok::Set,
        "table" => Tok::Table,
        "temp" => Tok::Temp,
        "then" => Tok::Then,
        "time" => Tok::Time,
        "timestamp" => Tok::Timestamp,
        "to" => Tok::To,
        "transaction" => Tok::Transaction,
        "trigger" => Tok::Trigger,
        "union" => Tok::Union,
        "unique" => Tok::Unique,
        "update" => Tok::Update,
        "use" => Tok::Use,
        "using" => Tok::Using,
        "vacuum" => Tok::Vacuum,
        "values" => Tok::Values,
        "view" => Tok::View,
        "virtual" => Tok::Virtual,
        "when" => Tok::When,
        "where" => Tok::Where,
        "with" => Tok::With,
        "without" => Tok::Without,
        "zone" => Tok::Zone,

        "StringLiteral" => Tok::StringLiteral(<&'input str>),
        "Id" => Tok::Id(<&'input str>),
        "Variable" => Tok::Variable(<&'input str>),

        "Blob" => Tok::Blob(<&'input str>),
        "Integer" => Tok::Integer(<&'input str>),
        "Float" => Tok::Float(<&'input str>),

        "&" => Tok::BitAnd,
        "~" => Tok::BitNot,
        "|" => Tok::BitOr,
        "," => Tok::Comma,
        "||" => Tok::Concat,
        "." => Tok::Dot,
        "=" => Tok::Equals,
        ">" => Tok::GreaterThan,
        "=>" => Tok::GreaterEquals,
        "(" => Tok::LeftParen,
        "<<" => Tok::LeftShift,
        "<=" => Tok::LessEquals,
        "<" => Tok::LessThan,
        "-" => Tok::Minus,
        "<>" => Tok::NotEquals,
        "+" => Tok::Plus,
        "%" => Tok::Reminder,
        ")" => Tok::RightParen,
        ">>" => Tok::RightShift,
        ";" => Tok::Semi,
        "/" => Tok::Slash,
        "*" => Tok::Star,
    }
}